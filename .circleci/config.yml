version: 2.1

# E X E C U T O R S

executors:

  default_android:
    shell: /bin/bash --login -eo pipefail
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    docker:
      - image: cirrusci/flutter:2.2.3

  default_ios:
    shell: /bin/bash --login -eo pipefail
    environment:
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: "12.2.0"

# C O M M A N D S

commands:

  # Common commands

  setup_submodule:
    steps:
      - run:
          name: Setup Git submodules
          command: |
            git submodule init
            git submodule update

  install_dart_packages:
    steps:
      - run:
          name: Install Dart Packages
          command: $FLUTTER_HOME/bin/flutter pub get

  generate_code:
    steps:
      - run:
          name: Generate code
          command: $FLUTTER_HOME/bin/flutter pub run build_runner build
      - run:
          name: Generate intl
          command: $FLUTTER_HOME/bin/flutter packages pub run intl_translation:generate_from_arb --output-dir=lib/l10n --no-use-deferred-loading lib/l10n/l10n.dart lib/l10n/intl_*.arb

  # Only Lint Commands

  restore_dart_package_cache:
    steps:
      - restore_cache:
          keys:
            - dart-dependencies-{{ checksum "pubspec.lock" }}
            - dart-dependencies-

  save_dart_package_cache:
    steps:
      - save_cache:
          paths:
            - .dart_tool/build
          key: dart-dependencies-{{ checksum "pubspec.lock" }}

  install_ruby_gems:
    steps:
      - run:
          name: Update bundler
          command: bundle update --bundler
      - run:
          name: Run bundle install
          command: bundle install --path vendor/bundle

  run_danger:
    steps:
      - run:
          name: Run flutter analyze
          command: $FLUTTER_HOME/bin/flutter analyze > flutter_analyze_report.txt || true
      - store_artifacts:
          path: flutter_analyze_report.txt
      - run:
          name: Run Danger
          command: bundle exec danger

  run_unit_test:
    steps:
      - run:
          name: Run flutter test
          command: $FLUTTER_HOME/bin/flutter test

  # Only iOS Deployment Commands

  install_flutter:
    steps:
      - run:
          name: Install flutter SDK
          command: mkdir -p ~/sdks/flutter && git clone -b stable https://github.com/flutter/flutter.git --branch=1.22.6 ~/sdks/flutter
      - run:
          name: Set flutter SDK PATH in bash
          command: echo 'export FLUTTER_HOME=~/sdks/flutter' >> $BASH_ENV && source $BASH_ENV
      - run:
          name: Try doctor
          command: $FLUTTER_HOME/bin/flutter doctor

  install_ruby_gems_ios:
    steps:
      - run:
          name: Update bundler
          command: bundle update --bundler
      - run:
          name: Run bundle install
          command: bundle install --path vendor/bundle
          working_directory: ~/project/ios

  publish_ipa:
    parameters:
      build_type:
        type: enum
        enum: ['alpha', 'beta', 'production']
        default: alpha
    steps:
      - run:
          name: Install firebase cli
          command: curl -sL firebase.tools | bash
      - run:
          name: Build flutter app
          command: |
            case << parameters.build_type >> in
              "alpha" ) $FLUTTER_HOME/bin/flutter build ios --release;;
              "beta" ) $FLUTTER_HOME/bin/flutter build ios --release;;
              "production" ) $FLUTTER_HOME/bin/flutter build ios --release;;
            esac
      - run:
          name: Generate signed ipa file and distribute
          command: bundle exec fastlane publish_<< parameters.build_type >>
          working_directory: ~/project/ios
      - store_artifacts:
          path: ~/project/ios/Runner.ipa
      - store_artifacts:
          path: ~/project/ios/Runner.app.dSYM.zip

  # Only Android Deployment Commands

  install_ruby_gems_android:
    steps:
      - run:
          name: Update bundler
          command: bundle update --bundler
      - run:
          name: Run bundle install
          command: bundle install --path vendor/bundle
          working_directory: ~/project/android

  publish_apk:
    parameters:
      build_type:
        type: enum
        enum: ['alpha', 'beta', 'production']
        default: alpha
    steps:
      - run:
          name: Install firebase cli
          command: curl -sL https://firebase.tools | bash
      - run:
          name: Decode Release Properties
          working_directory: ~/project/android/app/keys
          command : |
            echo $ANDROID_RELEASE_PROPERTIES | base64 --d > keystore.properties
      - run:
          name: Decode KeyStore
          working_directory: ~/project/android/app/keys
          command : |
            echo $ANDROID_RELEASE_KEYSTORE | base64 --d > owner-release.jks
      - run:
          name: Build flutter app
          command: |
            case << parameters.build_type >> in
              "alpha" ) $FLUTTER_HOME/bin/flutter build apk --release ;;
              "beta" ) $FLUTTER_HOME/bin/flutter build apk --release ;;
              "production" ) $FLUTTER_HOME/bin/flutter build appbundle --release ;;
            esac
          working_directory: ~/project
      - run:
          name: Generate the apk file and publish or store
          command: bundle exec fastlane publish_<< parameters.build_type >>
          working_directory: ~/project/android
      - store_artifacts:
          path: ~/project/build/app/outputs
      - when:
          condition:
            equal: [ production, << parameters.build_type >> ]
          steps:
            # Create symbols.zip
            - run:
                name: Create symbols.zip
                command: |
                  cd build/app/intermediates/flutter/productionRelease
                  mkdir obj
                  cp -r arm64-v8a obj/
                  cp -r armeabi-v7a obj/
                  cp -r x86_64 obj/
                  cd obj
                  zip -r symbols.zip .
            - store_artifacts:
                path: ~/project/build/app/intermediates/flutter/productionRelease/obj/symbols.zip

# J O B S

jobs:
  lint:
    executor: default_android
    steps:
      - checkout
      - restore_dart_package_cache
      - install_dart_packages
      - save_dart_package_cache
      - install_ruby_gems
      - run_danger
  #      - run_unit_test

  deploy_ios:
    executor: default_ios
    parameters:
      build_type:
        type: enum
        enum: ['alpha', 'beta', 'production']
        default: alpha
    steps:
      - checkout
      - install_flutter
      - install_ruby_gems_ios
      - setup_submodule
      - install_dart_packages
      - generate_code
      - publish_ipa:
          build_type: << parameters.build_type >>

  deploy_android:
    executor: default_android
    parameters:
      build_type:
        type: enum
        enum: ['alpha', 'beta', 'production']
        default: alpha
    steps:
      - checkout
      - install_ruby_gems_android
      - setup_submodule
      - install_dart_packages
      - generate_code
      - publish_apk:
          build_type: << parameters.build_type >>

# W O R K F L O W

workflows:
  check:
    jobs:
      - lint
  deploy:
    jobs:
      - deploy_ios:
          name: deploy_ios_alpha
          build_type: alpha
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+){2}-alpha-[0-9]+$/
            branches:
              ignore: /.*/
      - deploy_android:
          name: deploy_android_alpha
          build_type: alpha
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+){2}-alpha-[0-9]+$/
            branches:
              ignore: /.*/
      - deploy_ios:
          name: deploy_ios_beta
          build_type: beta
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+){2}-beta-[0-9]+$/
            branches:
              ignore: /.*/
      - deploy_android:
          name: deploy_android_beta
          build_type: beta
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+){2}-beta-[0-9]+$/
            branches:
              ignore: /.*/
      - deploy_ios:
          name: deploy_ios_production
          build_type: production
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+){2}$/
            branches:
              ignore: /.*/
      - deploy_android:
          name: deploy_android_production
          build_type: production
          filters:
            tags:
              only: /^v[0-9]+(\.[0-9]+){2}$/
            branches:
              ignore: /.*/
